test (new alu) { c=>
	c.io.a.poke(1.U)
	c.io.b.poke(2.U) 
	c.io.op.poke(1.U)    
    c.clock.step(1)    
    c.io.out.expect(3.U)  

    c.io.a.poke(4.U)
	c.io.b.poke(2.U) 
	c.io.op.poke(0.U)    
    c.clock.step(1)    
    c.io.out.expect(2.U)  

    c.io.a.poke(3.U)
	c.io.b.poke(4.U) 
	c.io.op.poke(0.U)    
    c.clock.step(1)    
    c.io.out.expect(255.U) 

    c.io.a.poke(255.U)
	c.io.b.poke(3.U) 
	c.io.op.poke(1.U)    
    c.clock.step(1)    
    c.io.out.expect(2.U) 

    c.io.op.poke(1.U)
    for (i <- 0 until 10) {
    var counter = c.init
    c.io.a.poke(i.U)
    c.io.b.poke(i.U)
    counter = 2 * i
    c.clock.step(1)
    c.io.out.expect(counter.U)
  }

}